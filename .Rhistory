grafico_is_lm
library(tidyverse)
library(readxl)
library(ggpubr)
df.parametros <- read_xlsx("parametros.xlsx")
var_parametros = df.parametros
var_rango_produccion = 0:25000
var_dist_eq = 0.2
var_color <- c("#FF4036", "#0073D9", "#4DAF4A")
var_movilidad_capital = "smk"
var_tipo_cambio = "flexible"
var_parametros <- var_parametros %>%
mutate(alfa = 1/(1-c*(1-t)-m),
gamma = alfa*h/(h+alfa*b*k),
beta = alfa*b/(h+alfa*b*k))
parametros_inicial <- filter(var_parametros, Escenario == "Inicial")
parametros_final <- filter(var_parametros, Escenario == "Final")
df.cambios <- diff(as.matrix(var_parametros[,-1]))
cambios <- colnames(df.cambios)[which(df.cambios != 0)]
var_cambios <- 0
# Funciones IS-LM
is_f <- function(produccion, alfa, C0, G0, I0, XN0, v, e, p_dom, p_int, b, prima_riesgo) { 1/b*(C0+G0+I0+XN0+v*e*p_int/p_dom-1/alfa*produccion) + prima_riesgo }
lm_f <- function(produccion, k, h, M, p_dom, prima_riesgo) { 1/h * (k*produccion-M/p_dom) + prima_riesgo }
# tipo_cambio_f <- function(produccion, tipo_interes, p_dom, p_int, v, alfa, b, C0, G0, I0, XN0) { p_dom/(v*p_int)*(produccion/alfa+b*tipo_interes-(C0+G0+I0+XN0)) }
# tipo_cambio_f <- function(produccion, p_dom, p_int, v, alfa, gamma, beta, C0, G0, I0, XN0, M) {
#   p_dom/(p_int*v)*(produccion/gamma-(G0+C0+I0+XN0)-beta/gamma*M/p_dom)
# }
xn_f <- function(produccion, XN0, v, e, p_int, p_dom, m) { XN0 + v*e*p_int/p_dom - m*produccion }
# Equilibrio inicial
df <- data.frame(produccion = var_rango_produccion,
is_0 = is_f(produccion = var_rango_produccion,
alfa = parametros_inicial$alfa, b = parametros_inicial$b, C0 = parametros_inicial$C0,
I0 = parametros_inicial$I0, G0 = parametros_inicial$G0, XN0 = parametros_inicial$XN0,
v = parametros_inicial$v, e = parametros_inicial$e, p_int = parametros_inicial$p_int,
p_dom = parametros_inicial$p_dom, prima_riesgo = parametros_inicial$prima_riesgo),
lm_0 = lm_f(produccion = var_rango_produccion, k = parametros_inicial$k, h = parametros_inicial$h,
M = parametros_inicial$M, p_dom = parametros_inicial$p_dom, prima_riesgo = parametros_inicial$prima_riesgo),
xn_0 = xn_f(produccion = var_rango_produccion, XN0 = parametros_inicial$XN0, v = parametros_inicial$v,
e = parametros_inicial$e, p_int = parametros_inicial$p_int, p_dom = parametros_inicial$p_dom,
m = parametros_inicial$m))
is_0_f <- approxfun(df$produccion, df$is_0, rule = 2)
lm_0_f <- approxfun(df$produccion, df$lm_0, rule = 2)
xn_0_f <- approxfun(df$produccion, df$xn_0, rule = 2)
# Puntos de equilibrio
# Equilibrio inicial
y0 <- uniroot(function(x) is_0_f(x) - lm_0_f(x), range(df$produccion))$root
i0 <- lm_0_f(y0)
xn0 <- xn_0_f(y0)
df.equilibrio <- data.frame("Escenario" = "Inicial", y = y0, i = i0, xn = xn0)
# Movilidad perfecta de capitales ----
mf_tc_fijo <- function(var_rango_produccion, cambios, parametros_final, var_dist_eq, df.equilibrio) {
cambio_f <- "cambio_funciones_"
# Indicar si hay una nueva IS
if(any(c("c", "t", "m", "b", "C0", "I0", "G0", "XN0", "v", "e", "p_int", "p_dom") %in% cambios) == T) {
# cambio en la IS
df <- df %>%
mutate(is_1 = is_f(produccion = var_rango_produccion,
alfa = parametros_final$alfa, b = parametros_final$b, C0 = parametros_final$C0,
I0 = parametros_final$I0, G0 = parametros_final$G0, XN0 = parametros_final$XN0,
v = parametros_final$v, e = parametros_final$e, p_int = parametros_final$p_int,
p_dom = parametros_final$p_dom, prima_riesgo = parametros_final$prima_riesgo))
is_1_f <- approxfun(df$produccion, df$is_1, rule = 2)
cambio_f <- paste0(cambio_f, "IS_")
}
# Indicar si hay una nueva LM
if(any(c("k", "h", "M", "p_dom") %in% cambios) == T) {
df <- df %>%
mutate(lm_1 = lm_f(produccion = var_rango_produccion, k = parametros_final$k, h = parametros_final$h,
M = parametros_final$M, p_dom = parametros_final$p_dom, prima_riesgo = parametros_final$prima_riesgo))
lm_1_f <- approxfun(df$produccion, df$lm_1, rule = 2)
cambio_f <- paste0(cambio_f, "LM_")
}
# Indicar si hay una nueva XN
if(any(c("XN0", "v", "e", "p_int", "p_dom", "m") %in% cambios) == T) {
df <- df %>%
mutate(xn_1 = xn_f(produccion = var_rango_produccion, XN0 = parametros_final$XN0, v = parametros_final$v,
e = parametros_final$e, p_int = parametros_final$p_int, p_dom = parametros_final$p_dom,
m = parametros_final$m, prima_riesgo = parametros_final$prima_riesgo))
xn_1_f <- approxfun(df$produccion, df$xn_1, rule = 2)
cambio_f <- paste0(cambio_f, "XN")
}
if(grepl("IS|LM|XN", cambio_f)) {
if(grepl("IS|XN", cambio_f)) {
# Nivel de renta con la nueva IS para el tipo de interés inicial
y2 <- parametros_final %>% mutate(y2 = alfa*(C0+G0+I0+XN0+v*e*p_int/p_dom-b*i0)) %>% pull(y2)
# Calcular la oferta monetaria con la que se alcanza el nuevo nivel de renta con el tipo de interés inicial
M2 <- parametros_final %>% mutate(M2 = p_dom*(k*y2 - h*i0)) %>% pull(M2)
} else {
# # Tipo de interés con la nueva LM
# i2 <- parametros_final %>% mutate(i2 = (k*y2-M/p_dom)/h) %>% pull(i2)
# Calcular la oferta monetaria con la que se alcanza el tipo de interés inicial
M2 <- parametros_final %>% mutate(M2 = p_dom*(k*y0 - h*i0)) %>% pull(M2)
y2 <- y0
}
df <- df %>%
mutate(lm_2 = lm_f(produccion = var_rango_produccion, k = parametros_final$k,
h = parametros_final$h, M = M2, p_dom = parametros_final$p_dom, prima_riesgo = parametros_final$prima_riesgo))
lm_2_f <- approxfun(df$produccion, df$lm_2, rule = 2)
df.equilibrio <- bind_rows(df.equilibrio, # %>% filter(Escenario == "Inicial")
data.frame("Escenario" = "Final", y = y2, i = i0, xn = ifelse(exists("xn_1_f") == T, xn_1_f(y2), xn_0_f(y2))))
df <- df %>%
filter(produccion > min(c((1-var_dist_eq)*y0, (1+var_dist_eq)*y2)), produccion < max(c((1-var_dist_eq)*y0, (1+var_dist_eq)*y2)))
} else {
df <- df %>%
rename("LM" = "lm_0", "IS" = "is_0")
df <- df %>%
filter(produccion > (1-var_dist_eq)*y0, produccion < (1+var_dist_eq)*y0)
}
list.resultados <- list(df, df.equilibrio)
return(list.resultados)
}
resultados.mf_tc_fijo <- mf_tc_fijo(var_rango_produccion = var_rango_produccion, cambios = cambios,
parametros_final = parametros_final, var_dist_eq = var_dist_eq, df.equilibrio = df.equilibrio)
# Visualizar resultados ----
df.equilibrio <- resultados.mf_tc_fijo[[2]]
df.is.lm <- resultados.mf_tc_fijo[[1]] %>%
select(-contains("xn")) %>%
pivot_longer(cols = !produccion, names_to = "funcion", values_to = "tipo_interes") %>%
separate(funcion, into = c("IS_LM", "situacion"), sep = "_", remove = FALSE) %>%
replace_na(list(situacion = 0)) %>%
mutate(funcion = toupper(str_replace(funcion, "_", " ")),
IS_LM = toupper(IS_LM)) %>%
group_by(IS_LM) %>%
mutate(situacion = case_when(situacion == max(situacion) ~ "Final",
situacion > min(situacion) ~ "Intermedia",
TRUE ~ "Inicial"))
df.xn <- resultados.mf_tc_fijo[[1]] %>%
select(-matches("is|lm")) %>%
pivot_longer(cols = !produccion, names_to = "funcion", values_to = "xn") %>%
separate(funcion, into = c("IS_LM", "situacion"), sep = "_", remove = FALSE) %>%
replace_na(list(situacion = 0)) %>%
mutate(funcion = toupper(str_replace(funcion, "_", " ")),
IS_LM = toupper(IS_LM)) %>%
group_by(IS_LM) %>%
mutate(situacion = case_when(situacion == max(situacion) ~ "Final",
situacion > min(situacion) ~ "Intermedia",
TRUE ~ "Inicial"))
grafico_is_lm <- ggplot(data = df.is.lm, aes(x = produccion, y = tipo_interes, color = funcion)) +
geom_path(size = 1, aes(linetype = situacion)) +
scale_color_manual(breaks = c("IS", "IS 0", "IS 1", "IS 2", "LM", "LM 0", "LM 1", "LM 2"),
values = c(rep(var_color[1], 4), rep(var_color[2], 4))) +
# scale_color_manual(values = c("#FF4036", "#FF4036", "#0073D9", "#0073D9")) +
geom_segment(aes(x = y0, y = min(tipo_interes), xend = y0, yend = i0), lty = "dotted", color = "black") +
geom_segment(aes(x = min(produccion), y = i0, xend = y0, yend = i0), lty = "dotted", color = "black")
if(any(grepl("Inicial", df.is.lm$situacion))) {
grafico_is_lm <- grafico_is_lm +
# ggplot(data = df.is.lm, aes(x = produccion, y = tipo_interes, color = funcion)) +
geom_segment(aes(x = df.equilibrio$y[-1], y = min(tipo_interes), xend = df.equilibrio$y[-1], yend = df.equilibrio$i[-1]), lty = "dotted", color = "black") +
geom_segment(aes(x = min(produccion), y = df.equilibrio$i[-1], xend = df.equilibrio$y[-1], yend = df.equilibrio$i[-1]), lty = "dotted", color = "black")
}
grafico_is_lm <- grafico_is_lm +
geom_point(data = df.equilibrio[,-1], aes(x = y, y = i), size = 2, color = "black") +
# geom_point(aes(x = y1, y = i1), size = 2, color = "black") +
scale_y_continuous(breaks = round(df.equilibrio$i, 2)) +
scale_x_continuous(breaks = round(df.equilibrio$y, 0)) +
labs(x = "Producción (Y)",
y = "Tipo de interés (i)"#,
# title = "IS-LM en economía abierta sin movilidad de capital"
) +
theme_classic() +
theme(legend.position = "bottom",
legend.title = element_blank()) +
guides(linetype = FALSE)
grafico_is_lm
library(tidyverse)
library(readxl)
library(ggpubr)
df.parametros <- read_xlsx("parametros.xlsx")
var_parametros = df.parametros
var_rango_produccion = 0:25000
var_dist_eq = 0.2
var_color <- c("#FF4036", "#0073D9", "#4DAF4A")
var_movilidad_capital = "smk"
var_tipo_cambio = "flexible"
var_parametros <- var_parametros %>%
mutate(alfa = 1/(1-c*(1-t)-m),
gamma = alfa*h/(h+alfa*b*k),
beta = alfa*b/(h+alfa*b*k))
parametros_inicial <- filter(var_parametros, Escenario == "Inicial")
parametros_final <- filter(var_parametros, Escenario == "Final")
df.cambios <- diff(as.matrix(var_parametros[,-1]))
cambios <- colnames(df.cambios)[which(df.cambios != 0)]
var_cambios <- 0
# Funciones IS-LM
is_f <- function(produccion, alfa, C0, G0, I0, XN0, v, e, p_dom, p_int, b, prima_riesgo) { 1/b*(C0+G0+I0+XN0+v*e*p_int/p_dom-1/alfa*produccion) + prima_riesgo }
lm_f <- function(produccion, k, h, M, p_dom, prima_riesgo) { 1/h * (k*produccion-M/p_dom) + prima_riesgo }
# tipo_cambio_f <- function(produccion, tipo_interes, p_dom, p_int, v, alfa, b, C0, G0, I0, XN0) { p_dom/(v*p_int)*(produccion/alfa+b*tipo_interes-(C0+G0+I0+XN0)) }
# tipo_cambio_f <- function(produccion, p_dom, p_int, v, alfa, gamma, beta, C0, G0, I0, XN0, M) {
#   p_dom/(p_int*v)*(produccion/gamma-(G0+C0+I0+XN0)-beta/gamma*M/p_dom)
# }
xn_f <- function(produccion, XN0, v, e, p_int, p_dom, m) { XN0 + v*e*p_int/p_dom - m*produccion }
# Equilibrio inicial
df <- data.frame(produccion = var_rango_produccion,
is_0 = is_f(produccion = var_rango_produccion,
alfa = parametros_inicial$alfa, b = parametros_inicial$b, C0 = parametros_inicial$C0,
I0 = parametros_inicial$I0, G0 = parametros_inicial$G0, XN0 = parametros_inicial$XN0,
v = parametros_inicial$v, e = parametros_inicial$e, p_int = parametros_inicial$p_int,
p_dom = parametros_inicial$p_dom, prima_riesgo = parametros_inicial$prima_riesgo),
lm_0 = lm_f(produccion = var_rango_produccion, k = parametros_inicial$k, h = parametros_inicial$h,
M = parametros_inicial$M, p_dom = parametros_inicial$p_dom, prima_riesgo = parametros_inicial$prima_riesgo),
xn_0 = xn_f(produccion = var_rango_produccion, XN0 = parametros_inicial$XN0, v = parametros_inicial$v,
e = parametros_inicial$e, p_int = parametros_inicial$p_int, p_dom = parametros_inicial$p_dom,
m = parametros_inicial$m))
is_0_f <- approxfun(df$produccion, df$is_0, rule = 2)
lm_0_f <- approxfun(df$produccion, df$lm_0, rule = 2)
xn_0_f <- approxfun(df$produccion, df$xn_0, rule = 2)
# Puntos de equilibrio
# Equilibrio inicial
y0 <- uniroot(function(x) is_0_f(x) - lm_0_f(x), range(df$produccion))$root
i0 <- lm_0_f(y0)
xn0 <- xn_0_f(y0)
df.equilibrio <- data.frame("Escenario" = "Inicial", y = y0, i = i0, xn = xn0)
# Movilidad perfecta de capitales ----
mf_tc_fijo <- function(var_rango_produccion, cambios, parametros_final, var_dist_eq, df.equilibrio) {
cambio_f <- "cambio_funciones_"
# Indicar si hay una nueva IS
if(any(c("c", "t", "m", "b", "C0", "I0", "G0", "XN0", "v", "e", "p_int", "p_dom") %in% cambios) == T) {
# cambio en la IS
df <- df %>%
mutate(is_1 = is_f(produccion = var_rango_produccion,
alfa = parametros_final$alfa, b = parametros_final$b, C0 = parametros_final$C0,
I0 = parametros_final$I0, G0 = parametros_final$G0, XN0 = parametros_final$XN0,
v = parametros_final$v, e = parametros_final$e, p_int = parametros_final$p_int,
p_dom = parametros_final$p_dom, prima_riesgo = parametros_final$prima_riesgo))
is_1_f <- approxfun(df$produccion, df$is_1, rule = 2)
cambio_f <- paste0(cambio_f, "IS_")
}
# Indicar si hay una nueva LM
if(any(c("k", "h", "M", "p_dom") %in% cambios) == T) {
df <- df %>%
mutate(lm_1 = lm_f(produccion = var_rango_produccion, k = parametros_final$k, h = parametros_final$h,
M = parametros_final$M, p_dom = parametros_final$p_dom, prima_riesgo = parametros_final$prima_riesgo))
lm_1_f <- approxfun(df$produccion, df$lm_1, rule = 2)
cambio_f <- paste0(cambio_f, "LM_")
}
# Indicar si hay una nueva XN
if(any(c("XN0", "v", "e", "p_int", "p_dom", "m") %in% cambios) == T) {
df <- df %>%
mutate(xn_1 = xn_f(produccion = var_rango_produccion, XN0 = parametros_final$XN0, v = parametros_final$v,
e = parametros_final$e, p_int = parametros_final$p_int, p_dom = parametros_final$p_dom,
m = parametros_final$m, prima_riesgo = parametros_final$prima_riesgo))
xn_1_f <- approxfun(df$produccion, df$xn_1, rule = 2)
cambio_f <- paste0(cambio_f, "XN")
}
if(grepl("IS|LM|XN", cambio_f)) {
if(grepl("IS|XN", cambio_f)) {
# Nivel de renta con la nueva IS para el tipo de interés inicial
y2 <- parametros_final %>% mutate(y2 = alfa*(C0+G0+I0+XN0+v*e*p_int/p_dom-b*i0)) %>% pull(y2)
# Calcular la oferta monetaria con la que se alcanza el nuevo nivel de renta con el tipo de interés inicial
M2 <- parametros_final %>% mutate(M2 = p_dom*(k*y2 - h*i0)) %>% pull(M2)
} else {
# # Tipo de interés con la nueva LM
# i2 <- parametros_final %>% mutate(i2 = (k*y2-M/p_dom)/h) %>% pull(i2)
# Calcular la oferta monetaria con la que se alcanza el tipo de interés inicial
M2 <- parametros_final %>% mutate(M2 = p_dom*(k*y0 - h*i0)) %>% pull(M2)
y2 <- y0
}
df <- df %>%
mutate(lm_2 = lm_f(produccion = var_rango_produccion, k = parametros_final$k,
h = parametros_final$h, M = M2, p_dom = parametros_final$p_dom, prima_riesgo = parametros_final$prima_riesgo))
lm_2_f <- approxfun(df$produccion, df$lm_2, rule = 2)
df.equilibrio <- bind_rows(df.equilibrio, # %>% filter(Escenario == "Inicial")
data.frame("Escenario" = "Final", y = y2, i = i0, xn = ifelse(exists("xn_1_f") == T, xn_1_f(y2), xn_0_f(y2))))
df <- df %>%
filter(produccion > min(c((1-var_dist_eq)*y0, (1+var_dist_eq)*y2)), produccion < max(c((1-var_dist_eq)*y0, (1+var_dist_eq)*y2)))
} else {
df <- df %>%
rename("LM" = "lm_0", "IS" = "is_0")
df <- df %>%
filter(produccion > (1-var_dist_eq)*y0, produccion < (1+var_dist_eq)*y0)
}
list.resultados <- list(df, df.equilibrio)
return(list.resultados)
}
resultados.mf_tc_fijo <- mf_tc_fijo(var_rango_produccion = var_rango_produccion, cambios = cambios,
parametros_final = parametros_final, var_dist_eq = var_dist_eq, df.equilibrio = df.equilibrio)
# Visualizar resultados ----
df.equilibrio <- resultados.mf_tc_fijo[[2]]
df.is.lm <- resultados.mf_tc_fijo[[1]] %>%
select(-contains("xn")) %>%
pivot_longer(cols = !produccion, names_to = "funcion", values_to = "tipo_interes") %>%
separate(funcion, into = c("IS_LM", "situacion"), sep = "_", remove = FALSE) %>%
replace_na(list(situacion = 0)) %>%
mutate(funcion = toupper(str_replace(funcion, "_", " ")),
IS_LM = toupper(IS_LM)) %>%
group_by(IS_LM) %>%
mutate(situacion = case_when(situacion == max(situacion) ~ "Final",
situacion > min(situacion) ~ "Intermedia",
TRUE ~ "Inicial"))
df.xn <- resultados.mf_tc_fijo[[1]] %>%
select(-matches("is|lm")) %>%
pivot_longer(cols = !produccion, names_to = "funcion", values_to = "xn") %>%
separate(funcion, into = c("IS_LM", "situacion"), sep = "_", remove = FALSE) %>%
replace_na(list(situacion = 0)) %>%
mutate(funcion = toupper(str_replace(funcion, "_", " ")),
IS_LM = toupper(IS_LM)) %>%
group_by(IS_LM) %>%
mutate(situacion = case_when(situacion == max(situacion) ~ "Final",
situacion > min(situacion) ~ "Intermedia",
TRUE ~ "Inicial"))
grafico_is_lm <- ggplot(data = df.is.lm, aes(x = produccion, y = tipo_interes, color = funcion)) +
geom_path(size = 1, aes(linetype = situacion)) +
scale_color_manual(breaks = c("IS", "IS 0", "IS 1", "IS 2", "LM", "LM 0", "LM 1", "LM 2"),
values = c(rep(var_color[1], 4), rep(var_color[2], 4))) +
# scale_color_manual(values = c("#FF4036", "#FF4036", "#0073D9", "#0073D9")) +
geom_segment(aes(x = y0, y = min(tipo_interes), xend = y0, yend = i0), lty = "dotted", color = "black") +
geom_segment(aes(x = min(produccion), y = i0, xend = y0, yend = i0), lty = "dotted", color = "black")
if(any(grepl("Inicial", df.is.lm$situacion))) {
grafico_is_lm <- grafico_is_lm +
# ggplot(data = df.is.lm, aes(x = produccion, y = tipo_interes, color = funcion)) +
geom_segment(aes(x = df.equilibrio$y[-1], y = min(tipo_interes), xend = df.equilibrio$y[-1], yend = df.equilibrio$i[-1]), lty = "dotted", color = "black") +
geom_segment(aes(x = min(produccion), y = df.equilibrio$i[-1], xend = df.equilibrio$y[-1], yend = df.equilibrio$i[-1]), lty = "dotted", color = "black")
}
grafico_is_lm <- grafico_is_lm +
geom_point(data = df.equilibrio[,-1], aes(x = y, y = i), size = 2, color = "black") +
# geom_point(aes(x = y1, y = i1), size = 2, color = "black") +
scale_y_continuous(breaks = round(df.equilibrio$i, 2)) +
scale_x_continuous(breaks = round(df.equilibrio$y, 0)) +
labs(x = "Producción (Y)",
y = "Tipo de interés (i)"#,
# title = "IS-LM en economía abierta sin movilidad de capital"
) +
theme_classic() +
theme(legend.position = "bottom",
legend.title = element_blank()) +
guides(linetype = FALSE)
grafico_is_lm
df.equilibrio
library(tidyverse)
library(readxl)
library(ggpubr)
df.parametros <- read_xlsx("parametros.xlsx")
var_parametros = df.parametros
var_rango_produccion = 0:25000
var_dist_eq = 0.2
var_color <- c("#FF4036", "#0073D9", "#4DAF4A")
var_movilidad_capital = "smk"
var_tipo_cambio = "flexible"
var_parametros <- var_parametros %>%
mutate(alfa = 1/(1-c*(1-t)-m),
gamma = alfa*h/(h+alfa*b*k),
beta = alfa*b/(h+alfa*b*k))
parametros_inicial <- filter(var_parametros, Escenario == "Inicial")
parametros_final <- filter(var_parametros, Escenario == "Final")
df.cambios <- diff(as.matrix(var_parametros[,-1]))
cambios <- colnames(df.cambios)[which(df.cambios != 0)]
var_cambios <- 0
# Funciones IS-LM
is_f <- function(produccion, alfa, C0, G0, I0, XN0, v, e, p_dom, p_int, b, prima_riesgo) { 1/b*(C0+G0+I0+XN0+v*e*p_int/p_dom-1/alfa*produccion) + prima_riesgo }
lm_f <- function(produccion, k, h, M, p_dom, prima_riesgo) { 1/h * (k*produccion-M/p_dom) + prima_riesgo }
# tipo_cambio_f <- function(produccion, tipo_interes, p_dom, p_int, v, alfa, b, C0, G0, I0, XN0) { p_dom/(v*p_int)*(produccion/alfa+b*tipo_interes-(C0+G0+I0+XN0)) }
# tipo_cambio_f <- function(produccion, p_dom, p_int, v, alfa, gamma, beta, C0, G0, I0, XN0, M) {
#   p_dom/(p_int*v)*(produccion/gamma-(G0+C0+I0+XN0)-beta/gamma*M/p_dom)
# }
xn_f <- function(produccion, XN0, v, e, p_int, p_dom, m) { XN0 + v*e*p_int/p_dom - m*produccion }
# Equilibrio inicial
df <- data.frame(produccion = var_rango_produccion,
is_0 = is_f(produccion = var_rango_produccion,
alfa = parametros_inicial$alfa, b = parametros_inicial$b, C0 = parametros_inicial$C0,
I0 = parametros_inicial$I0, G0 = parametros_inicial$G0, XN0 = parametros_inicial$XN0,
v = parametros_inicial$v, e = parametros_inicial$e, p_int = parametros_inicial$p_int,
p_dom = parametros_inicial$p_dom, prima_riesgo = parametros_inicial$prima_riesgo),
lm_0 = lm_f(produccion = var_rango_produccion, k = parametros_inicial$k, h = parametros_inicial$h,
M = parametros_inicial$M, p_dom = parametros_inicial$p_dom, prima_riesgo = parametros_inicial$prima_riesgo),
xn_0 = xn_f(produccion = var_rango_produccion, XN0 = parametros_inicial$XN0, v = parametros_inicial$v,
e = parametros_inicial$e, p_int = parametros_inicial$p_int, p_dom = parametros_inicial$p_dom,
m = parametros_inicial$m))
is_0_f <- approxfun(df$produccion, df$is_0, rule = 2)
lm_0_f <- approxfun(df$produccion, df$lm_0, rule = 2)
xn_0_f <- approxfun(df$produccion, df$xn_0, rule = 2)
# Puntos de equilibrio
# Equilibrio inicial
y0 <- uniroot(function(x) is_0_f(x) - lm_0_f(x), range(df$produccion))$root
i0 <- lm_0_f(y0)
xn0 <- xn_0_f(y0)
df.equilibrio <- data.frame("Escenario" = "Inicial", y = y0, i = i0, xn = xn0)
# Movilidad perfecta de capitales ----
mf_tc_fijo <- function(var_rango_produccion, cambios, parametros_final, var_dist_eq, df.equilibrio) {
cambio_f <- "cambio_funciones_"
# Indicar si hay una nueva IS
if(any(c("c", "t", "m", "b", "C0", "I0", "G0", "XN0", "v", "e", "p_int", "p_dom") %in% cambios) == T) {
# cambio en la IS
df <- df %>%
mutate(is_1 = is_f(produccion = var_rango_produccion,
alfa = parametros_final$alfa, b = parametros_final$b, C0 = parametros_final$C0,
I0 = parametros_final$I0, G0 = parametros_final$G0, XN0 = parametros_final$XN0,
v = parametros_final$v, e = parametros_final$e, p_int = parametros_final$p_int,
p_dom = parametros_final$p_dom, prima_riesgo = parametros_final$prima_riesgo))
is_1_f <- approxfun(df$produccion, df$is_1, rule = 2)
cambio_f <- paste0(cambio_f, "IS_")
}
# Indicar si hay una nueva LM
if(any(c("k", "h", "M", "p_dom") %in% cambios) == T) {
df <- df %>%
mutate(lm_1 = lm_f(produccion = var_rango_produccion, k = parametros_final$k, h = parametros_final$h,
M = parametros_final$M, p_dom = parametros_final$p_dom, prima_riesgo = parametros_final$prima_riesgo))
lm_1_f <- approxfun(df$produccion, df$lm_1, rule = 2)
cambio_f <- paste0(cambio_f, "LM_")
}
# Indicar si hay una nueva XN
if(any(c("XN0", "v", "e", "p_int", "p_dom", "m") %in% cambios) == T) {
df <- df %>%
mutate(xn_1 = xn_f(produccion = var_rango_produccion, XN0 = parametros_final$XN0, v = parametros_final$v,
e = parametros_final$e, p_int = parametros_final$p_int, p_dom = parametros_final$p_dom,
m = parametros_final$m, prima_riesgo = parametros_final$prima_riesgo))
xn_1_f <- approxfun(df$produccion, df$xn_1, rule = 2)
cambio_f <- paste0(cambio_f, "XN")
}
if(grepl("IS|LM|XN", cambio_f)) {
if(grepl("IS|XN", cambio_f)) {
# Nivel de renta con la nueva IS para el tipo de interés inicial
y2 <- parametros_final %>% mutate(y2 = alfa*(C0+G0+I0+XN0+v*e*p_int/p_dom-b*i0)) %>% pull(y2)
# Calcular la oferta monetaria con la que se alcanza el nuevo nivel de renta con el tipo de interés inicial
M2 <- parametros_final %>% mutate(M2 = p_dom*(k*y2 - h*i0)) %>% pull(M2)
} else {
# # Tipo de interés con la nueva LM
# i2 <- parametros_final %>% mutate(i2 = (k*y2-M/p_dom)/h) %>% pull(i2)
# Calcular la oferta monetaria con la que se alcanza el tipo de interés inicial
M2 <- parametros_final %>% mutate(M2 = p_dom*(k*y0 - h*i0)) %>% pull(M2)
y2 <- y0
}
df <- df %>%
mutate(lm_2 = lm_f(produccion = var_rango_produccion, k = parametros_final$k,
h = parametros_final$h, M = M2, p_dom = parametros_final$p_dom, prima_riesgo = parametros_final$prima_riesgo))
lm_2_f <- approxfun(df$produccion, df$lm_2, rule = 2)
df.equilibrio <- bind_rows(df.equilibrio, # %>% filter(Escenario == "Inicial")
data.frame("Escenario" = "Final", y = y2, i = i0, xn = ifelse(exists("xn_1_f") == T, xn_1_f(y2), xn_0_f(y2))))
df <- df %>%
filter(produccion > min(c((1-var_dist_eq)*y0, (1+var_dist_eq)*y2)), produccion < max(c((1-var_dist_eq)*y0, (1+var_dist_eq)*y2)))
} else {
df <- df %>%
rename("LM" = "lm_0", "IS" = "is_0")
df <- df %>%
filter(produccion > (1-var_dist_eq)*y0, produccion < (1+var_dist_eq)*y0)
}
list.resultados <- list(df, df.equilibrio)
return(list.resultados)
}
resultados.mf_tc_fijo <- mf_tc_fijo(var_rango_produccion = var_rango_produccion, cambios = cambios,
parametros_final = parametros_final, var_dist_eq = var_dist_eq, df.equilibrio = df.equilibrio)
# Visualizar resultados ----
df.equilibrio <- resultados.mf_tc_fijo[[2]]
df.is.lm <- resultados.mf_tc_fijo[[1]] %>%
select(-contains("xn")) %>%
pivot_longer(cols = !produccion, names_to = "funcion", values_to = "tipo_interes") %>%
separate(funcion, into = c("IS_LM", "situacion"), sep = "_", remove = FALSE) %>%
replace_na(list(situacion = 0)) %>%
mutate(funcion = toupper(str_replace(funcion, "_", " ")),
IS_LM = toupper(IS_LM)) %>%
group_by(IS_LM) %>%
mutate(situacion = case_when(situacion == max(situacion) ~ "Final",
situacion > min(situacion) ~ "Intermedia",
TRUE ~ "Inicial"))
df.xn <- resultados.mf_tc_fijo[[1]] %>%
select(-matches("is|lm")) %>%
pivot_longer(cols = !produccion, names_to = "funcion", values_to = "xn") %>%
separate(funcion, into = c("IS_LM", "situacion"), sep = "_", remove = FALSE) %>%
replace_na(list(situacion = 0)) %>%
mutate(funcion = toupper(str_replace(funcion, "_", " ")),
IS_LM = toupper(IS_LM)) %>%
group_by(IS_LM) %>%
mutate(situacion = case_when(situacion == max(situacion) ~ "Final",
situacion > min(situacion) ~ "Intermedia",
TRUE ~ "Inicial"))
grafico_is_lm <- ggplot(data = df.is.lm, aes(x = produccion, y = tipo_interes, color = funcion)) +
geom_path(size = 1, aes(linetype = situacion)) +
scale_color_manual(breaks = c("IS", "IS 0", "IS 1", "IS 2", "LM", "LM 0", "LM 1", "LM 2"),
values = c(rep(var_color[1], 4), rep(var_color[2], 4))) +
# scale_color_manual(values = c("#FF4036", "#FF4036", "#0073D9", "#0073D9")) +
geom_segment(aes(x = y0, y = min(tipo_interes), xend = y0, yend = i0), lty = "dotted", color = "black") +
geom_segment(aes(x = min(produccion), y = i0, xend = y0, yend = i0), lty = "dotted", color = "black")
if(any(grepl("Inicial", df.is.lm$situacion))) {
grafico_is_lm <- grafico_is_lm +
# ggplot(data = df.is.lm, aes(x = produccion, y = tipo_interes, color = funcion)) +
geom_segment(aes(x = df.equilibrio$y[-1], y = min(tipo_interes), xend = df.equilibrio$y[-1], yend = df.equilibrio$i[-1]), lty = "dotted", color = "black") +
geom_segment(aes(x = min(produccion), y = df.equilibrio$i[-1], xend = df.equilibrio$y[-1], yend = df.equilibrio$i[-1]), lty = "dotted", color = "black")
}
grafico_is_lm <- grafico_is_lm +
geom_point(data = df.equilibrio[,-1], aes(x = y, y = i), size = 2, color = "black") +
# geom_point(aes(x = y1, y = i1), size = 2, color = "black") +
scale_y_continuous(breaks = round(df.equilibrio$i, 2)) +
scale_x_continuous(breaks = round(df.equilibrio$y, 0)) +
labs(x = "Producción (Y)",
y = "Tipo de interés (i)"#,
# title = "IS-LM en economía abierta sin movilidad de capital"
) +
theme_classic() +
theme(legend.position = "bottom",
legend.title = element_blank()) +
guides(linetype = FALSE)
grafico_is_lm
shiny::runApp('mundell-fleming')
runApp('mundell-fleming')
runApp('mundell-fleming')
runApp('mundell-fleming')
runApp('mundell-fleming')
runApp('mundell-fleming')
runApp('mundell-fleming')
runApp('mundell-fleming')
runApp('mundell-fleming')
runApp('mundell-fleming')
shiny::runApp('mundell-fleming')
runApp()
runApp('mundell-fleming')
shiny::runApp('mundell-fleming')
shiny::runApp('mundell-fleming')
shiny::runApp('mundell-fleming')
runApp('mundell-fleming')
runApp('mundell-fleming')
runApp('mundell-fleming')
runApp('mundell-fleming')
shiny::runApp('mundell-fleming')
